// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ContratoDeVentas {
    address public propietario;
    uint256 public tiempoActualizado;
    string public descripcionDeVenta;
    uint public precio;
    bool public enVenta = true;
    address[] public historialDePropietarios;

    event EstadoDelUsuario(string _msg, address usuario, uint cantidad, uint256 tiempo);
    
    constructor(string memory descripcion, uint _precio) payable {
        propietario = msg.sender;
        historialDePropietarios.push(msg.sender); // Añade al propietario inicial al historial
        descripcionDeVenta = descripcion;
        precio = _precio;
        tiempoActualizado = block.timestamp;
        emit EstadoDelUsuario(descripcion, msg.sender, msg.value, block.timestamp);
        emit EstadoDelUsuario("ArtIculo en venta:", msg.sender, msg.value, block.timestamp);
    }
    
    function comprar() external payable {
        require(msg.value >= precio && enVenta == true, "Ether insuficiente o el articulo no esta en venta");
        payable(propietario).transfer(address(this).balance);
        propietario = msg.sender;
        enVenta = false;
        historialDePropietarios.push(msg.sender); // Añade al nuevo propietario al historial
        emit EstadoDelUsuario("Articulo Comprado", msg.sender, msg.value, block.timestamp);
        emit EstadoDelUsuario("Articulo ya no esta en venta", msg.sender, msg.value, block.timestamp);
        tiempoActualizado = block.timestamp;
    }

    function actualizarPrecio(uint _precio) external soloPropietario {
        precio = _precio;
        emit EstadoDelUsuario("Precio Actualizado", msg.sender, precio, block.timestamp);
    }

    function modificarDescripcion(string calldata descripcion) external soloPropietario {
        descripcionDeVenta = descripcion;
        emit EstadoDelUsuario(descripcion, msg.sender, 0, block.timestamp);
        emit EstadoDelUsuario("Descripcion Modificada", msg.sender, 0, block.timestamp);
    }

    function ponerEnVenta() external soloPropietario {
        enVenta = true;
        emit EstadoDelUsuario("Articulo ahora esta en venta", msg.sender, 0, block.timestamp);
    }

    function retirarDeVenta() external soloPropietario {
        enVenta = false;
        emit EstadoDelUsuario("Articulo ya no esta en venta", msg.sender, 0, block.timestamp);
    }

    function obtenerHistorialDePropietarios() external view returns (address[] memory) {
        return historialDePropietarios;
    }

    modifier soloPropietario() {
        require(msg.sender == propietario, "El llamante no es el propietario");
        _;
        tiempoActualizado = block.timestamp;
    }
}
